generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model armors {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  source        String          @db.VarChar(6)
  type_id       Int
  rarity_id     Int
  stats         Json            @db.Json
  item_rarities item_rarities   @relation(fields: [rarity_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_rarity_id")
  sources       sources         @relation(fields: [source], references: [abrv], onDelete: Cascade, onUpdate: NoAction, map: "fk_source_abrv")
  item_types    item_types      @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_id")
  server_armors server_armors[]
}

model character_actions {
  id                Int                @id @default(autoincrement())
  char_id           Int
  name              String
  description       String?
  atk_id            Int?
  deleted_at        DateTime?          @db.Date
  character_attacks character_attacks? @relation(fields: [atk_id], references: [id], onUpdate: NoAction, map: "fk_atk_id")
  characters        characters         @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model character_attacks {
  id                                       Int                 @id @default(autoincrement())
  char_id                                  Int
  name                                     String
  description                              String?
  atk_stat                                 String              @db.VarChar(3)
  save_dc                                  Int?
  save_stat                                String?             @db.VarChar(3)
  on_fail_dmg                              Float?              @default(0.5) @db.Real
  weapon_id                                Int?
  damage                                   String?
  dmgtype_id                               Int?
  magic_bonus                              Int?                @default(0)
  proficient                               Boolean?            @default(false)
  deleted_at                               DateTime?           @db.Date
  character_actions                        character_actions[]
  stats_character_attacks_atk_statTostats  stats               @relation("character_attacks_atk_statTostats", fields: [atk_stat], references: [key], onDelete: Cascade, onUpdate: NoAction, map: "fk_atk_stat")
  characters                               characters          @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  damagetypes                              damagetypes?        @relation(fields: [dmgtype_id], references: [id], onUpdate: NoAction, map: "fk_dmgtype_id")
  stats_character_attacks_save_statTostats stats?              @relation("character_attacks_save_statTostats", fields: [save_stat], references: [key], onUpdate: NoAction, map: "fk_save_stat")
  weapons                                  weapons?            @relation(fields: [weapon_id], references: [id], onUpdate: NoAction, map: "fk_weapon_id")
}

model character_class_feats {
  id         Int        @id @default(autoincrement())
  char_id    Int
  class_id   Int
  feat_id    Int
  overwrites Json?      @db.Json
  deleted_at DateTime?  @db.Date
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  classes    classes    @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  feats      feats      @relation(fields: [feat_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_feat_id")
}

model character_class_langs {
  id          Int        @id @default(autoincrement())
  char_id     Int
  class_id    Int
  language_id Int
  deleted_at  DateTime?  @db.Date
  characters  characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  classes     classes    @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  languages   languages  @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_language_id")
}

model character_class_profs {
  id            Int           @id @default(autoincrement())
  char_id       Int
  class_id      Int
  name          String
  type          String        @db.VarChar(6)
  expert        Boolean       @default(false)
  characters    characters    @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  classes       classes       @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  proficiencies proficiencies @relation(fields: [type], references: [type], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_key")
}

model character_class_spells {
  id         Int        @id @default(autoincrement())
  char_id    Int
  class_id   Int
  spell_id   Int
  overwrites Json?      @db.Json
  deleted_at DateTime?  @db.Date
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  classes    classes    @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  spells     spells     @relation(fields: [spell_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_spell_id")
}

model character_feats {
  id         Int        @id @default(autoincrement())
  char_id    Int
  feat_id    Int
  overwrites Json?      @db.Json
  deleted_at DateTime?  @db.Date
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  feats      feats      @relation(fields: [feat_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_feat_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model character_immunities {
  id         Int        @id @default(autoincrement())
  char_id    Int
  immune_id  Int
  type       String     @db.VarChar(10)
  deleted_at DateTime?  @db.Date
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
}

model character_languages {
  id          Int        @id @default(autoincrement())
  char_id     Int
  language_id Int
  characters  characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  languages   languages  @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_language_id")
}

model character_notes {
  id         Int        @id @default(autoincrement())
  char_id    Int
  title      String?
  content    String
  private    Boolean    @default(false)
  created_at DateTime   @default(now()) @db.Timestamp(6)
  deleted_at DateTime?  @db.Date
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
}

model character_proficiencies {
  id            Int           @id @default(autoincrement())
  char_id       Int
  name          String
  type          String        @db.VarChar(6)
  expert        Boolean       @default(false)
  characters    characters    @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  proficiencies proficiencies @relation(fields: [type], references: [type], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_key")
}

model character_race_feats {
  id         Int        @id @default(autoincrement())
  char_id    Int
  race_id    Int
  feat_id    Int
  overwrites Json?      @db.Json
  deleted_at DateTime?  @db.Date
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  feats      feats      @relation(fields: [feat_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_feat_id")
  races      races      @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
}

model character_race_langs {
  id          Int        @id @default(autoincrement())
  char_id     Int
  race_id     Int
  language_id Int
  deleted_at  DateTime?  @db.Date
  characters  characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  languages   languages  @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_language_id")
  races       races      @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
}

model character_race_profs {
  id            Int           @id @default(autoincrement())
  char_id       Int
  race_id       Int
  name          String
  type          String        @db.VarChar(6)
  expert        Boolean       @default(false)
  characters    characters    @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  races         races         @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
  proficiencies proficiencies @relation(fields: [type], references: [type], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_key")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model character_resistances {
  id         Int        @id @default(autoincrement())
  char_id    Int
  resist_id  Int
  type       String     @db.VarChar(10)
  deleted_at DateTime?  @db.Date
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model character_senses {
  id         Int        @id @default(autoincrement())
  char_id    Int
  sense      String     @db.VarChar(3)
  range      Int        @default(60)
  deleted_at DateTime?  @db.Date
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  senses     senses     @relation(fields: [sense], references: [key], onDelete: Cascade, onUpdate: NoAction, map: "fk_sense_key")
}

model character_spells {
  id         Int        @id @default(autoincrement())
  char_id    Int
  spell_id   Int
  overwrites Json?      @db.Json
  deleted_at DateTime?  @db.Date
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  spells     spells     @relation(fields: [spell_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_spell_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model character_stats {
  id         Int        @id @default(autoincrement())
  char_id    Int
  stat       String     @db.VarChar(3)
  value      Int        @default(8)
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  stats      stats      @relation(fields: [stat], references: [key], onDelete: Cascade, onUpdate: NoAction, map: "fk_stat_key")
}

model character_subclass_langs {
  id          Int        @id @default(autoincrement())
  char_id     Int
  sub_id      Int
  language_id Int
  deleted_at  DateTime?  @db.Date
  characters  characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  languages   languages  @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_language_id")
  subclasses  subclasses @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_id")
}

model character_subclass_profs {
  id            Int           @id @default(autoincrement())
  char_id       Int
  sub_id        Int
  name          String
  type          String        @db.VarChar(6)
  expert        Boolean       @default(false)
  characters    characters    @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  subclasses    subclasses    @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_id")
  proficiencies proficiencies @relation(fields: [type], references: [type], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_key")
}

model character_subrace_profs {
  id            Int           @id @default(autoincrement())
  char_id       Int
  sub_id        Int
  name          String
  type          String        @db.VarChar(6)
  expert        Boolean       @default(false)
  characters    characters    @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  subraces      subraces      @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_id")
  proficiencies proficiencies @relation(fields: [type], references: [type], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_key")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model characters {
  id                                    Int                        @id @default(autoincrement())
  user_id                               String                     @db.VarChar(18)
  name                                  String
  portrait                              String?
  ac                                    Int?                       @default(10)
  level                                 Int?                       @default(1)
  xp                                    Int?                       @default(0)
  hp_current                            Int?                       @default(0)
  hp_max                                Int?                       @default(0)
  hp_temp                               Int?                       @default(0)
  hp_method                             Int?                       @default(dbgenerated("0.5"))
  initiative                            Int?                       @default(0)
  stats                                 Json                       @db.Json
  currency                              Json                       @default("{\"cp\": 0, \"sp\": 0, \"ep\": 0, \"gp\": 0, \"pp\": 0}") @db.Json
  race_id                               Int?
  subrace_id                            Int?
  class_id                              Int?
  subclass_id                           Int?
  class_level                           Int?                       @default(1)
  multiclass                            Json?                      @db.Json
  created_at                            DateTime?                  @default(now()) @db.Timestamp(6)
  deleted_at                            DateTime?                  @db.Date
  character_actions                     character_actions[]
  character_attacks                     character_attacks[]
  character_class_feats                 character_class_feats[]
  character_class_langs                 character_class_langs[]
  character_class_profs                 character_class_profs[]
  character_class_spells                character_class_spells[]
  character_feats                       character_feats[]
  character_immunities                  character_immunities[]
  character_languages                   character_languages[]
  character_notes                       character_notes[]
  character_proficiencies               character_proficiencies[]
  character_race_feats                  character_race_feats[]
  character_race_langs                  character_race_langs[]
  character_race_profs                  character_race_profs[]
  character_resistances                 character_resistances[]
  character_senses                      character_senses[]
  character_spells                      character_spells[]
  character_stats                       character_stats[]
  character_subclass_langs              character_subclass_langs[]
  character_subclass_profs              character_subclass_profs[]
  character_subrace_profs               character_subrace_profs[]
  classes                               classes?                   @relation(fields: [class_id], references: [id], onUpdate: NoAction, map: "fk_class_id")
  races                                 races?                     @relation(fields: [race_id], references: [id], onUpdate: NoAction, map: "fk_race_id")
  subclasses                            subclasses?                @relation(fields: [subclass_id], references: [id], onUpdate: NoAction, map: "fk_subclass_id")
  subraces                              subraces?                  @relation(fields: [subrace_id], references: [id], onUpdate: NoAction, map: "fk_subrace_id")
  users_characters_user_idTousers       users                      @relation("characters_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
  session_players                       session_players[]
  users_users_selected_charTocharacters users[]                    @relation("users_selected_charTocharacters")
}

model class_languages {
  id          Int       @id @default(autoincrement())
  class_id    Int
  language_id Int
  classes     classes   @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  languages   languages @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_language_id")
}

model class_proficiencies {
  id            Int           @id @default(autoincrement())
  class_id      Int
  name          String
  type          String        @db.VarChar(6)
  expert        Boolean       @default(false)
  classes       classes       @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  proficiencies proficiencies @relation(fields: [type], references: [type], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_key")
}

model class_saves {
  id       Int     @id @default(autoincrement())
  class_id Int
  stat     String  @db.VarChar(3)
  classes  classes @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  stats    stats   @relation(fields: [stat], references: [key], onDelete: Cascade, onUpdate: NoAction, map: "fk_stat_key")
}

model class_traits {
  id          Int      @id @default(autoincrement())
  class_id    Int
  name        String
  description String
  visible     Boolean? @default(true)
  options     Json     @default("[]") @db.Json
  classes     classes  @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model classes {
  id                     Int                      @id @default(autoincrement())
  name                   String
  description            String?
  source                 String                   @db.VarChar(6)
  hitdice                Int                      @default(8)
  caster                 Boolean                  @default(false)
  castlvl                Int?                     @default(0)
  cast_stat              String?                  @db.VarChar(3)
  has_subclass           Boolean                  @default(false)
  either_requirement     Boolean                  @default(false)
  character_class_feats  character_class_feats[]
  character_class_langs  character_class_langs[]
  character_class_profs  character_class_profs[]
  character_class_spells character_class_spells[]
  characters             characters[]
  class_languages        class_languages[]
  class_proficiencies    class_proficiencies[]
  class_saves            class_saves[]
  class_traits           class_traits[]
  stats                  stats?                   @relation(fields: [cast_stat], references: [key], onUpdate: NoAction, map: "fk_cast_stat")
  sources                sources                  @relation(fields: [source], references: [abrv], onDelete: Cascade, onUpdate: NoAction, map: "fk_source_abrv")
  mc_requirements        mc_requirements[]
  server_classes         server_classes[]
  subclasses             subclasses[]
}

model command_types {
  id       Int        @id @default(autoincrement())
  name     String
  key      String     @unique(map: "uq_cmd_key") @db.VarChar(7)
  commands commands[]
}

model commands {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  type            String            @db.VarChar(7)
  command_types   command_types     @relation(fields: [type], references: [key], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_key")
  server_commands server_commands[]
}

model conditions {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String?
  server_conditions server_conditions[]
}

model damagetypes {
  id                 Int                  @id @default(autoincrement())
  name               String
  character_attacks  character_attacks[]
  server_damagetypes server_damagetypes[]
  spells             spells[]
}

model feats {
  id                    Int                     @id @default(autoincrement())
  name                  String
  description           String?
  prerequisites         String[]
  options               Json?                   @db.Json
  character_class_feats character_class_feats[]
  character_feats       character_feats[]
  character_race_feats  character_race_feats[]
  server_feats          server_feats[]
}

model item_rarities {
  id      Int       @id @default(autoincrement())
  name    String
  armors  armors[]
  weapons weapons[]
}

model item_types {
  id      Int       @id @default(autoincrement())
  name    String
  armors  armors[]
  weapons weapons[]
}

model languages {
  id                       Int                        @id @default(autoincrement())
  name                     String
  source                   String                     @db.VarChar(6)
  type                     String?                    @db.VarChar(8)
  character_class_langs    character_class_langs[]
  character_languages      character_languages[]
  character_race_langs     character_race_langs[]
  character_subclass_langs character_subclass_langs[]
  class_languages          class_languages[]
  sources                  sources                    @relation(fields: [source], references: [abrv], onDelete: Cascade, onUpdate: NoAction, map: "fk_source_abrv")
  race_languages           race_languages[]
  subrace_languages        subrace_languages[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model mc_requirements {
  id       Int     @id @default(autoincrement())
  class_id Int
  stat     String  @db.VarChar(3)
  value    Int     @default(13)
  classes  classes @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  stats    stats   @relation(fields: [stat], references: [key], onDelete: Cascade, onUpdate: NoAction, map: "fk_stat_key")
}

model proficiencies {
  id                       Int                        @id @default(autoincrement())
  name                     String
  type                     String                     @unique(map: "uq_prof_type") @db.VarChar(6)
  character_class_profs    character_class_profs[]
  character_proficiencies  character_proficiencies[]
  character_race_profs     character_race_profs[]
  character_subclass_profs character_subclass_profs[]
  character_subrace_profs  character_subrace_profs[]
  class_proficiencies      class_proficiencies[]
  race_proficiencies       race_proficiencies[]
  subclass_proficiencies   subclass_proficiencies[]
  subrace_proficiencies    subrace_proficiencies[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model race_immunities {
  id        Int    @id @default(autoincrement())
  race_id   Int
  immune_id Int
  type      String @db.VarChar(10)
  races     races  @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
}

model race_languages {
  id          Int       @id @default(autoincrement())
  race_id     Int
  language_id Int
  languages   languages @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_language_id")
  races       races     @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
}

model race_proficiencies {
  id            Int           @id @default(autoincrement())
  race_id       Int
  name          String
  type          String        @db.VarChar(6)
  expert        Boolean       @default(false)
  races         races         @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
  proficiencies proficiencies @relation(fields: [type], references: [type], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_key")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model race_resistances {
  id        Int    @id @default(autoincrement())
  race_id   Int
  resist_id Int
  type      String @db.VarChar(10)
  races     races  @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model race_senses {
  id      Int    @id @default(autoincrement())
  race_id Int
  sense   String @db.VarChar(3)
  range   Int    @default(60)
  races   races  @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
  senses  senses @relation(fields: [sense], references: [key], onDelete: Cascade, onUpdate: NoAction, map: "fk_sense_key")
}

model race_stats {
  id                               Int     @id @default(autoincrement())
  race_id                          Int
  p1_stat                          String? @db.VarChar(3)
  p1_stat2                         String? @db.VarChar(3)
  p2_stat                          String? @db.VarChar(3)
  stats_race_stats_p1_stat2Tostats stats?  @relation("race_stats_p1_stat2Tostats", fields: [p1_stat2], references: [key], onUpdate: NoAction, map: "fk_p1stat2_key")
  stats_race_stats_p1_statTostats  stats?  @relation("race_stats_p1_statTostats", fields: [p1_stat], references: [key], onUpdate: NoAction, map: "fk_p1stat_key")
  stats_race_stats_p2_statTostats  stats?  @relation("race_stats_p2_statTostats", fields: [p2_stat], references: [key], onUpdate: NoAction, map: "fk_p2stat_key")
}

model race_traits {
  id          Int      @id @default(autoincrement())
  race_id     Int
  name        String
  description String
  visible     Boolean? @default(true)
  options     Json     @default("[]") @db.Json
  races       races    @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model races {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String?
  source               String                 @db.VarChar(6)
  size                 String                 @default("M") @db.VarChar(1)
  speed                Int                    @default(30)
  has_feat             Boolean                @default(false)
  has_subrace          Boolean                @default(false)
  character_race_feats character_race_feats[]
  character_race_langs character_race_langs[]
  character_race_profs character_race_profs[]
  characters           characters[]
  race_immunities      race_immunities[]
  race_languages       race_languages[]
  race_proficiencies   race_proficiencies[]
  race_resistances     race_resistances[]
  race_senses          race_senses[]
  race_traits          race_traits[]
  sources              sources                @relation(fields: [source], references: [abrv], onDelete: Cascade, onUpdate: NoAction, map: "fk_source_abrv")
  server_races         server_races[]
  subraces             subraces[]
}

model senses {
  id               Int                @id @default(autoincrement())
  name             String
  key              String             @unique(map: "uq_sense_key") @db.VarChar(3)
  character_senses character_senses[]
  race_senses      race_senses[]
  subclass_senses  subclass_senses[]
  subrace_senses   subrace_senses[]
}

model server_armors {
  id         Int       @id @default(autoincrement())
  server_id  String    @db.VarChar(18)
  armor_id   Int
  overwrites Json?     @db.Json
  deleted_at DateTime? @db.Date
  armors     armors    @relation(fields: [armor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_armor_id")
  servers    servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
}

model server_classes {
  id         Int       @id @default(autoincrement())
  server_id  String    @db.VarChar(18)
  class_id   Int
  overwrites Json?     @db.Json
  deleted_at DateTime? @db.Date
  classes    classes   @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  servers    servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model server_command_restrictions {
  key             Int             @id @default(autoincrement())
  command_id      String          @db.VarChar(18)
  id              String          @db.VarChar(18)
  type            Int
  permission      Boolean         @default(false)
  server_commands server_commands @relation(fields: [command_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_command_id")
}

model server_commands {
  id                          String                        @id @db.VarChar(18)
  server_id                   String                        @db.VarChar(18)
  command_id                  Int
  enabled                     Boolean                       @default(true)
  restricted                  Boolean                       @default(false)
  server_command_restrictions server_command_restrictions[]
  commands                    commands                      @relation(fields: [command_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_command_id")
  servers                     servers                       @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
}

model server_conditions {
  id           Int        @id @default(autoincrement())
  server_id    String     @db.VarChar(18)
  condition_id Int
  overwrites   Json?      @db.Json
  deleted_at   DateTime?  @db.Date
  conditions   conditions @relation(fields: [condition_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_condition_id")
  servers      servers    @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
}

model server_damagetypes {
  id            Int         @id @default(autoincrement())
  server_id     String      @db.VarChar(18)
  damagetype_id Int
  overwrites    Json?       @db.Json
  deleted_at    DateTime?   @db.Date
  damagetypes   damagetypes @relation(fields: [damagetype_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_damagetype_id")
  servers       servers     @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
}

model server_feats {
  id         Int       @id @default(autoincrement())
  server_id  String    @db.VarChar(18)
  feat_id    Int
  overwrites Json?     @db.Json
  deleted_at DateTime? @db.Date
  feats      feats     @relation(fields: [feat_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_feat_id")
  servers    servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model server_gms {
  id                                                           Int               @id @default(autoincrement())
  server_id                                                    String            @db.VarChar(18)
  user_id                                                      String            @db.VarChar(18)
  xp                                                           Int?              @default(0)
  selected_session                                             Int?
  suggestions                                                  Boolean?          @default(true)
  created_at                                                   DateTime?         @default(now()) @db.Timestamp(6)
  servers                                                      servers           @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
  server_sessions_server_gms_selected_sessionToserver_sessions server_sessions?  @relation("server_gms_selected_sessionToserver_sessions", fields: [selected_session], references: [id], onUpdate: NoAction, map: "fk_session_id")
  users                                                        users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
  server_sessions_server_sessions_gm_idToserver_gms            server_sessions[] @relation("server_sessions_gm_idToserver_gms")
}

model server_logs {
  id         Int       @id @default(autoincrement())
  server_id  String    @db.VarChar(18)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Date
  servers    servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
}

model server_members {
  id           String  @id @db.VarChar(18)
  server_id    String  @db.VarChar(18)
  user_id      String  @db.VarChar(18)
  display_name String
  servers      servers @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
  users        users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model server_notes {
  id         Int       @id @default(autoincrement())
  server_id  String    @db.VarChar(18)
  user_id    String    @db.VarChar(18)
  title      String?
  content    String
  private    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Date
  servers    servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model server_prefixes {
  id        Int     @id @default(autoincrement())
  server_id String  @db.VarChar(18)
  prefix    String  @db.VarChar(4)
  servers   servers @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
}

model server_races {
  id         Int       @id @default(autoincrement())
  server_id  String    @db.VarChar(18)
  race_id    Int
  overwrites Json?     @db.Json
  deleted_at DateTime? @db.Date
  races      races     @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
  servers    servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model server_sessions {
  id                                                      Int               @id @default(autoincrement())
  server_id                                               String            @db.VarChar(18)
  gm_id                                                   Int
  name                                                    String
  description                                             String?
  levels                                                  String            @db.VarChar(5)
  players                                                 String            @db.VarChar(5)
  min_runtime                                             Int?              @default(3)
  max_runtime                                             Int?              @default(4)
  date                                                    DateTime          @db.Timestamp(6)
  started_at                                              DateTime?         @db.Timestamp(6)
  ended_at                                                DateTime?         @db.Timestamp(6)
  channelid                                               String?           @db.VarChar(18)
  difficulty                                              Int?              @default(2)
  created_at                                              DateTime?         @default(now()) @db.Timestamp(6)
  deleted_at                                              DateTime?         @db.Date
  server_gms_server_gms_selected_sessionToserver_sessions server_gms[]      @relation("server_gms_selected_sessionToserver_sessions")
  server_gms_server_sessions_gm_idToserver_gms            server_gms        @relation("server_sessions_gm_idToserver_gms", fields: [gm_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_gm_id")
  servers                                                 servers           @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
  session_players                                         session_players[]
}

model server_sources {
  id        Int     @id @default(autoincrement())
  server_id String  @db.VarChar(18)
  source    String  @db.VarChar(6)
  enabled   Boolean @default(true)
  servers   servers @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
  sources   sources @relation(fields: [source], references: [abrv], onDelete: Cascade, onUpdate: NoAction, map: "fk_source_abrv")
}

model server_spells {
  id         Int       @id @default(autoincrement())
  server_id  String    @db.VarChar(18)
  spell_id   Int
  overwrites Json?     @db.Json
  deleted_at DateTime? @db.Date
  servers    servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
  spells     spells    @relation(fields: [spell_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_spell_id")
}

model server_subraces {
  id         Int       @id @default(autoincrement())
  server_id  String    @db.VarChar(18)
  subrace_id Int
  overwrites Json?     @db.Json
  deleted_at DateTime? @db.Date
  servers    servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
  subraces   subraces  @relation(fields: [subrace_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_subrace_id")
}

model server_weapons {
  id         Int       @id @default(autoincrement())
  server_id  String    @db.VarChar(18)
  weapon_id  Int
  overwrites Json?     @db.Json
  deleted_at DateTime? @db.Date
  servers    servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_server_id")
  weapons    weapons   @relation(fields: [weapon_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_weapon_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model servers {
  id                 String               @id @db.VarChar(18)
  name               String
  duplicate_sessions Boolean?             @default(false)
  ping_roleid        String?              @db.VarChar(18)
  summary_channelid  String?              @db.VarChar(18)
  log_channelid      String?              @db.VarChar(18)
  hp_method          Float?               @default(0.5) @db.Real
  gm_edit            Boolean?             @default(false)
  admin_roleid       String?              @db.VarChar(18)
  mod_roleid         String?              @db.VarChar(18)
  gm_roleid          String?              @db.VarChar(18)
  server_armors      server_armors[]
  server_classes     server_classes[]
  server_commands    server_commands[]
  server_conditions  server_conditions[]
  server_damagetypes server_damagetypes[]
  server_feats       server_feats[]
  server_gms         server_gms[]
  server_logs        server_logs[]
  server_members     server_members[]
  server_notes       server_notes[]
  server_prefixes    server_prefixes[]
  server_races       server_races[]
  server_sessions    server_sessions[]
  server_sources     server_sources[]
  server_spells      server_spells[]
  server_subraces    server_subraces[]
  server_weapons     server_weapons[]
}

model session_players {
  id              Int             @id @default(autoincrement())
  session_id      Int
  user_id         String          @db.VarChar(18)
  char_id         Int
  joined_at       DateTime        @default(now()) @db.Timestamp(6)
  characters      characters      @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_char_id")
  server_sessions server_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_session_id")
  users           users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model skills {
  id   Int    @id @default(autoincrement())
  name String
}

model sources {
  id             Int              @id @default(autoincrement())
  name           String
  abrv           String           @unique(map: "uq_abrv") @db.VarChar(6)
  armors         armors[]
  classes        classes[]
  languages      languages[]
  races          races[]
  server_sources server_sources[]
  subclasses     subclasses[]
  subraces       subraces[]
  weapons        weapons[]
}

model spell_schools {
  id     Int      @id @default(autoincrement())
  name   String
  spells spells[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spells {
  id                            Int                      @id @default(autoincrement())
  name                          String
  description                   String
  cast_time                     Int                      @default(1)
  cast_type                     String                   @default("action") @db.VarChar(12)
  cast_req                      String?
  level                         Int                      @default(0)
  school_id                     Int?
  classes                       Int[]
  higher_lvl                    Json?                    @db.Json
  dmgtype_id                    Int?
  dmg_stat                      String?                  @db.VarChar(3)
  save_stat                     String?                  @db.VarChar(3)
  stats                         Json                     @default("{\"range\": \"\", \"components\": \"\", \"duration\": \"\", \"concentration\": false, \"ritual\": false, \"damage\": \"\", \"save_dc\": 10, \"on_fail\": \"\", \"on_fail_dmg\": 0.5}") @db.Json
  character_class_spells        character_class_spells[]
  character_spells              character_spells[]
  server_spells                 server_spells[]
  stats_spells_dmg_statTostats  stats?                   @relation("spells_dmg_statTostats", fields: [dmg_stat], references: [key], onUpdate: NoAction, map: "fk_dmgstat_key")
  damagetypes                   damagetypes?             @relation(fields: [dmgtype_id], references: [id], onUpdate: NoAction, map: "fk_dmgtype_id")
  stats_spells_save_statTostats stats?                   @relation("spells_save_statTostats", fields: [save_stat], references: [key], onUpdate: NoAction, map: "fk_savestat_key")
  spell_schools                 spell_schools?           @relation(fields: [school_id], references: [id], onUpdate: NoAction, map: "fk_school_id")
}

model stats {
  id                                                   Int                 @id @default(autoincrement())
  name                                                 String
  key                                                  String              @unique(map: "uq_stat_key") @db.VarChar(3)
  character_attacks_character_attacks_atk_statTostats  character_attacks[] @relation("character_attacks_atk_statTostats")
  character_attacks_character_attacks_save_statTostats character_attacks[] @relation("character_attacks_save_statTostats")
  character_stats                                      character_stats[]
  class_saves                                          class_saves[]
  classes                                              classes[]
  mc_requirements                                      mc_requirements[]
  race_stats_race_stats_p1_stat2Tostats                race_stats[]        @relation("race_stats_p1_stat2Tostats")
  race_stats_race_stats_p1_statTostats                 race_stats[]        @relation("race_stats_p1_statTostats")
  race_stats_race_stats_p2_statTostats                 race_stats[]        @relation("race_stats_p2_statTostats")
  spells_spells_dmg_statTostats                        spells[]            @relation("spells_dmg_statTostats")
  spells_spells_save_statTostats                       spells[]            @relation("spells_save_statTostats")
}

model subclass_proficiencies {
  id            Int           @id @default(autoincrement())
  sub_id        Int
  name          String
  type          String        @db.VarChar(6)
  expert        Boolean       @default(false)
  subclasses    subclasses    @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_id")
  proficiencies proficiencies @relation(fields: [type], references: [type], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_key")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model subclass_senses {
  id         Int        @id @default(autoincrement())
  sub_id     Int
  sense      String     @db.VarChar(3)
  range      Int        @default(30)
  add        Boolean    @default(false)
  senses     senses     @relation(fields: [sense], references: [key], onDelete: Cascade, onUpdate: NoAction, map: "fk_sense_key")
  subclasses subclasses @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_id")
}

model subclass_traits {
  id          Int        @id @default(autoincrement())
  sub_id      Int
  name        String
  description String
  visible     Boolean?   @default(true)
  options     Json       @default("[]") @db.Json
  subclasses  subclasses @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_id")
}

model subclasses {
  id                       Int                        @id @default(autoincrement())
  class_id                 Int
  name                     String
  description              String
  source                   String                     @db.VarChar(6)
  character_subclass_langs character_subclass_langs[]
  character_subclass_profs character_subclass_profs[]
  characters               characters[]
  subclass_proficiencies   subclass_proficiencies[]
  subclass_senses          subclass_senses[]
  subclass_traits          subclass_traits[]
  classes                  classes                    @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  sources                  sources                    @relation(fields: [source], references: [abrv], onDelete: Cascade, onUpdate: NoAction, map: "fk_source_abrv")
}

model subrace_languages {
  id          Int       @id @default(autoincrement())
  sub_id      Int
  language_id Int
  languages   languages @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_language_id")
  subraces    subraces  @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_id")
}

model subrace_proficiencies {
  id            Int           @id @default(autoincrement())
  sub_id        Int
  name          String
  type          String        @db.VarChar(6)
  expert        Boolean       @default(false)
  subraces      subraces      @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_id")
  proficiencies proficiencies @relation(fields: [type], references: [type], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_key")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model subrace_senses {
  id       Int      @id @default(autoincrement())
  sub_id   Int
  sense    String   @db.VarChar(3)
  range    Int      @default(60)
  senses   senses   @relation(fields: [sense], references: [key], onDelete: Cascade, onUpdate: NoAction, map: "fk_sense_key")
  subraces subraces @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_id")
}

model subrace_traits {
  id          Int      @id @default(autoincrement())
  sub_id      Int
  name        String
  description String
  visible     Boolean? @default(true)
  options     Json     @default("[]") @db.Json
  subraces    subraces @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_id")
}

model subraces {
  id                      Int                       @id @default(autoincrement())
  race_id                 Int
  name                    String
  description             String?
  source                  String                    @db.VarChar(6)
  character_subrace_profs character_subrace_profs[]
  characters              characters[]
  server_subraces         server_subraces[]
  subrace_languages       subrace_languages[]
  subrace_proficiencies   subrace_proficiencies[]
  subrace_senses          subrace_senses[]
  subrace_traits          subrace_traits[]
  races                   races                     @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_race_id")
  sources                 sources                   @relation(fields: [source], references: [abrv], onDelete: Cascade, onUpdate: NoAction, map: "fk_source_abrv")
}

model user_notes {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.VarChar(18)
  title      String?
  content    String
  private    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Date
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model users {
  id                                         String            @id @db.VarChar(18)
  name                                       String
  display_name                               String
  joined_at                                  DateTime          @default(now()) @db.Timestamp(6)
  selected_char                              Int?
  characters_characters_user_idTousers       characters[]      @relation("characters_user_idTousers")
  server_gms                                 server_gms[]
  server_members                             server_members[]
  server_notes                               server_notes[]
  session_players                            session_players[]
  user_notes                                 user_notes[]
  characters_users_selected_charTocharacters characters?       @relation("users_selected_charTocharacters", fields: [selected_char], references: [id], onUpdate: NoAction, map: "fk_char_id")
}

model weapon_props {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model weapons {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String?
  source            String              @db.VarChar(6)
  type_id           Int?
  rarity_id         Int?
  stats             Json                @db.Json
  props             Int[]
  character_attacks character_attacks[]
  server_weapons    server_weapons[]
  item_rarities     item_rarities?      @relation(fields: [rarity_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_rarity_id")
  sources           sources             @relation(fields: [source], references: [abrv], onDelete: Cascade, onUpdate: NoAction, map: "fk_source_abrv")
  item_types        item_types?         @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_type_id")
}
